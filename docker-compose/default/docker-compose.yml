services:
  articleinsight-postgres:
    container_name: articleinsight-postgres
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - articleinsight-postgres-data:/var/lib/postgresql/data
      - ./database_connection:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: mike
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
      PGUSER: mike
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 20s
      retries: 25
      start_period: 30s
    extends:
      file: common-config.yml
      service: network-deploy-service
  
  articleinsight-pgadmin:
    container_name: articleinsight-pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - articleinsight-pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    extends:
      file: common-config.yml
      service: network-deploy-service
  
  articles-ms:
    container_name: articles-ms
    image: mykhailorudyk/articles:v3
    ports:
      - "8091:8091"
    environment:
      SPRING_APPLICATION_NAME: "articles"
    healthcheck:
      test: "curl --fail --silent localhost:8091/actuator/health/readiness | grep UP || exit 1"
      timeout: 20s
      interval: 20s
      retries: 30
      start_period: 40s
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  review-ms:
    container_name: review-ms
    image: mykhailorudyk/review:v3
    ports:
      - "8092:8092"
    environment:
      SPRING_APPLICATION_NAME: "review"
    healthcheck:
      test: "curl --fail --silent localhost:8092/actuator/health/readiness | grep UP || exit 1"
      timeout: 20s
      interval: 20s
      retries: 30
      start_period: 40s
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  eurekaserver:
    container_name: eurekaserver
    image: mykhailorudyk/eurekaserver:v3
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 20s
      retries: 25
      start_period: 30s
    depends_on: 
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config
  
  configserver:
    container_name: configserver
    image: mykhailorudyk/configserver:v3
    ports:
      - "8071:8071"
    environment:
      SPRING_APPLICATION_NAME: "configserver"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1i"
      interval: 20s
      timeout: 20s
      retries: 25
      start_period: 30s
    depends_on:
      articleinsight-rabbitmq:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

  articleinsight-rabbitmq:
    container_name: articleinsight-rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 20s
    extends:
      file: common-config.yml
      service: network-deploy-service
      
  apigateway:
    container_name: apigateway
    image: mykhailorudyk/apigateway:v3
    ports:
      - 8072:8072
    depends_on:
      articles-ms:
        condition: service_healthy
      review-ms:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
      EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE: http://eurekaserver:8761/eureka/  # refactor
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"  # refactor
    extends:
      file: common-config.yml
      service: network-deploy-service

  ### LOKI
  read:
    image: grafana/loki:3.1.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      articleinsight-network:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - articleinsight-network

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - articleinsight-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - articleinsight-network

  backend:
    image: grafana/loki:3.1.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - articleinsight-network
    
  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - articleinsight-network

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - articleinsight-network

volumes:
  articleinsight-postgres-data:
  articleinsight-pgadmin-data:

networks:
  articleinsight-network:
    driver: bridge
